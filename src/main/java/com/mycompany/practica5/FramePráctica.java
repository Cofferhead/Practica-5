/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.practica5;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;

/**
 *
 * @author felix
 */
public class FramePráctica extends javax.swing.JFrame {

    ListaDeCartas cartas;
    ListaCircular<Carta> cartasTotales;
    ListaCircular<Carta> lv;
    ListaCircular<Carta> atributo;
    ListaCircular<Carta> atk;
    ListaCircular<Carta> def;
    ListaCircular<Carta> filtrado;
    ListaCircular<Carta> listaActual;
    boolean menosAMas;
    int pos;
    //Música
    boolean reproducir;
    AudioInputStream audioInput;
    String caminoMusica = "C:\\Users\\felix\\Downloads\\Yu-Gi-Oh! Forbidden Memories OST - Main Menu (Remastered).wav";;
    Clip clip;
    File musicPath;
    /**
     * Creates new form FramePráctica
     */
    public FramePráctica() throws IOException, UnsupportedAudioFileException, LineUnavailableException {
        initComponents();
        //Lista de cartas
        cartas = new ListaDeCartas();
        cartasTotales = cartas.ordenarListaAlfabeticamente();
        //cartasTotales = cartas.getCartas();
        lv = cartas.ordenarListaPorNivelHtoL();
        atributo = cartas.ordenarListaPorAtributo();
        atk = cartas.ordenarListaPorAtkHtoL();
        def = cartas.ordenarListaPorDefHtoL();
        listaActual = cartasTotales;
        pos = 0;
        menosAMas = false;
        //Imagenes
        settearFuentes ();
        mostrarCartaActual();
        asignarFlechaIzquierda();
        asignarFlechaDerecha();
        //Musica
        reproducir = true;
        this.musicPath = new File(caminoMusica);
        audioInput = AudioSystem.getAudioInputStream(musicPath);
        clip = AudioSystem.getClip();
        clip.open(audioInput);
        clip.loop(Clip.LOOP_CONTINUOUSLY);
        this.reproducirMusica();
        //Boton de musica
        imagenDeFondo();
    }

    private void settearFuentes ()
    {
        Font fuente = new Font("Times New Roman", Font.BOLD, 14);
        Font fuente1 = new Font("Times New Roman", Font.BOLD, 22);
        Font fuente2 = new Font("Times New Roman", Font.BOLD, 12);
        this.LtoH.setFont(fuente);
        LtoH.setForeground(Color.WHITE);
        this.nombreLabel.setFont(fuente);
        this.nombreLabel.setForeground(Color.WHITE);
        
        this.cartasNum.setFont(fuente1);
        this.cartasNum.setForeground(Color.WHITE);
        this.atributoLabel.setFont(fuente1);
        atributoLabel.setForeground(Color.WHITE);
        this.lvLabel.setFont(fuente1);
        lvLabel.setForeground(Color.WHITE);
        this.labelAt.setFont(fuente1);
        this.labelAt.setForeground(Color.WHITE);
        this.tiposLabel.setFont(fuente2);
        this.tiposLabel.setForeground(Color.WHITE);
        
        this.atkLabel.setFont(fuente1);
        this.atkLabel.setForeground(Color.WHITE);
        this.defLabel.setFont(fuente1);
        this.defLabel.setForeground(Color.WHITE);
        
        //this.descripciónLabel.setFont(fuente2);
        //this.descripciónLabel.setForeground(Color.WHITE);
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        descripciónText = new javax.swing.JTextArea();
        labelAt = new javax.swing.JLabel();
        antButton = new javax.swing.JButton();
        sigButton = new javax.swing.JButton();
        alfabeticaButton = new javax.swing.JButton();
        nivelButton = new javax.swing.JButton();
        atributoButton = new javax.swing.JButton();
        atkButton = new javax.swing.JButton();
        defButton = new javax.swing.JButton();
        LtoH = new javax.swing.JCheckBox();
        sonidoButton = new javax.swing.JButton();
        lvList = new javax.swing.JComboBox<>();
        atributoList = new javax.swing.JComboBox<>();
        cartasNum = new javax.swing.JLabel();
        nombreLabel = new javax.swing.JLabel();
        atributoLabel = new javax.swing.JLabel();
        tiposLabel = new javax.swing.JLabel();
        lvLabel = new javax.swing.JLabel();
        atkLabel = new javax.swing.JLabel();
        defLabel = new javax.swing.JLabel();
        cartaLabel = new javax.swing.JLabel();
        fondoLabel = new javax.swing.JLabel();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(890, 640));
        getContentPane().setLayout(null);

        descripciónText.setColumns(20);
        descripciónText.setRows(5);
        jScrollPane2.setViewportView(descripciónText);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(20, 490, 780, 100);

        labelAt.setText("Atributo:");
        getContentPane().add(labelAt);
        labelAt.setBounds(670, 110, 90, 40);

        antButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                antButtonActionPerformed(evt);
            }
        });
        getContentPane().add(antButton);
        antButton.setBounds(280, 200, 60, 100);

        sigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sigButtonActionPerformed(evt);
            }
        });
        getContentPane().add(sigButton);
        sigButton.setBounds(580, 200, 60, 100);

        alfabeticaButton.setText("Show all cards");
        alfabeticaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alfabeticaButtonActionPerformed(evt);
            }
        });
        getContentPane().add(alfabeticaButton);
        alfabeticaButton.setBounds(27, 75, 136, 37);

        nivelButton.setText("Show by level");
        nivelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nivelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(nivelButton);
        nivelButton.setBounds(27, 130, 136, 37);

        atributoButton.setText("Show by attribute");
        atributoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributoButtonActionPerformed(evt);
            }
        });
        getContentPane().add(atributoButton);
        atributoButton.setBounds(27, 185, 136, 37);

        atkButton.setText("Show by atk");
        atkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atkButtonActionPerformed(evt);
            }
        });
        getContentPane().add(atkButton);
        atkButton.setBounds(27, 240, 136, 37);

        defButton.setText("Show by df");
        defButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defButtonActionPerformed(evt);
            }
        });
        getContentPane().add(defButton);
        defButton.setBounds(27, 295, 136, 37);

        LtoH.setText("Low to high");
        LtoH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LtoHActionPerformed(evt);
            }
        });
        getContentPane().add(LtoH);
        LtoH.setBounds(30, 350, 140, 40);

        sonidoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sonidoButtonActionPerformed(evt);
            }
        });
        getContentPane().add(sonidoButton);
        sonidoButton.setBounds(200, 290, 50, 40);

        lvList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        lvList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lvListActionPerformed(evt);
            }
        });
        getContentPane().add(lvList);
        lvList.setBounds(180, 140, 90, 22);

        atributoList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "Agua", "Luz", "Magia", "Oscuridad", "Tierra", "Trampa", "Viento" }));
        atributoList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributoListActionPerformed(evt);
            }
        });
        getContentPane().add(atributoList);
        atributoList.setBounds(180, 240, 88, 22);
        getContentPane().add(cartasNum);
        cartasNum.setBounds(400, 10, 120, 40);

        nombreLabel.setText("Nombre:");
        getContentPane().add(nombreLabel);
        nombreLabel.setBounds(30, 450, 310, 30);

        atributoLabel.setText("Atributo: ");
        getContentPane().add(atributoLabel);
        atributoLabel.setBounds(670, 150, 190, 40);

        tiposLabel.setText("Tipos:");
        getContentPane().add(tiposLabel);
        tiposLabel.setBounds(360, 450, 480, 30);

        lvLabel.setText("Lv: ");
        getContentPane().add(lvLabel);
        lvLabel.setBounds(670, 210, 190, 30);

        atkLabel.setText("Atk:");
        getContentPane().add(atkLabel);
        atkLabel.setBounds(670, 260, 190, 30);

        defLabel.setText("Def:");
        getContentPane().add(defLabel);
        defLabel.setBounds(670, 310, 190, 30);

        cartaLabel.setMinimumSize(new java.awt.Dimension(220, 300));
        getContentPane().add(cartaLabel);
        cartaLabel.setBounds(310, 50, 300, 390);
        getContentPane().add(fondoLabel);
        fondoLabel.setBounds(-10, -10, 890, 630);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void imagenDeFondo () throws IOException
    {
        BufferedImage bufferedImage = ImageIO.read(new File( "C:\\Users\\felix\\OneDrive\\Documentos\\NetBeansProjects\\Practica4\\src\\main\\java\\com\\mycompany\\practica4\\espacio.jpg" ));
        Image image = bufferedImage.getScaledInstance(fondoLabel.getWidth(), fondoLabel.getHeight()-10, Image.SCALE_DEFAULT);
        ImageIcon icon = new ImageIcon(image);
        fondoLabel.setIcon(icon);
    }
    private void nivelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nivelButtonActionPerformed
        // TODO add your handling code here:
        this.listaActual = this.lv;
        pos = 0;
        try {
            this.mostrarCartaActual();
        } catch (IOException ex) {
            Logger.getLogger(FramePráctica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nivelButtonActionPerformed

    private void lvListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lvListActionPerformed
        // TODO add your handling code here:
        this.cartas.setLvFiltro((String)lvList.getSelectedItem());
        this.asignarListas();
        System.out.println((String)lvList.getSelectedItem());
    }//GEN-LAST:event_lvListActionPerformed

    private void atributoListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributoListActionPerformed
        // TODO add your handling code here:
        this.cartas.setAtributoFiltro((String) atributoList.getSelectedItem());
        this.asignarListas();
        System.out.println((String) atributoList.getSelectedItem());
    }//GEN-LAST:event_atributoListActionPerformed

    private void LtoHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LtoHActionPerformed
        // TODO add your handling code here:
        this.menosAMas = !menosAMas;
        asignarListas();
    }//GEN-LAST:event_LtoHActionPerformed
    public void asignarListas ()
    {
        if (menosAMas)
        {
            cartasTotales = cartas.ordenarListaAlfabeticamente();
            lv = cartas.ordenarListaPorNivelLtoH();
            atributo = cartas.ordenarListaPorAtributoReverse();
            atk = cartas.ordenarListaPorAtkLtoH();
            def = cartas.ordenarListaPorDefLtoH();
        }
        else
        {
            cartasTotales = cartas.ordenarListaAlfabeticamenteInversa();
            lv = cartas.ordenarListaPorNivelHtoL();
            atributo = cartas.ordenarListaPorAtributo();
            atk = cartas.ordenarListaPorAtkHtoL();
            def = cartas.ordenarListaPorDefHtoL();
        }
    }
    private void alfabeticaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alfabeticaButtonActionPerformed
        this.listaActual = this.cartasTotales;
        pos = 0;
        try {
            // TODO add your handling code here:
            //this.cartaLabel.setIcon(listaActual.buscarPosición(pos).getDato().getIcono());
            mostrarCartaActual();
        } catch (IOException ex) {
            Logger.getLogger(FramePráctica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_alfabeticaButtonActionPerformed

    private void antButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_antButtonActionPerformed
        // TODO add your handling code here:
        if (pos > 0)
        {
            pos -= 1;
        }
        else
        {
            pos = listaActual.posiciónFinal();
        }
        try {
                //this.cartaLabel.setIcon(listaActual.buscarPosición(pos).getDato().getIcono());
                mostrarCartaActual();
            } catch (IOException ex) {
                Logger.getLogger(FramePráctica.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }//GEN-LAST:event_antButtonActionPerformed
    private void asignarFlechaDerecha() throws IOException
    {
        BufferedImage bufferedImage = ImageIO.read(new File( listaActual.buscarPosición(pos).getSig().getDato().getCaminoImagen() ));
        Image image = bufferedImage.getScaledInstance(this.sigButton.getWidth(), sigButton.getHeight(), Image.SCALE_DEFAULT);
        ImageIcon icon = new ImageIcon(image);
        sigButton.setIcon(icon);
    }
    private void asignarFlechaIzquierda() throws IOException
    {
        BufferedImage bufferedImage = ImageIO.read(new File( listaActual.buscarPosición(pos).getAnt().getDato().getCaminoImagen() ));
        Image image = bufferedImage.getScaledInstance(this.antButton.getWidth(), antButton.getHeight(), Image.SCALE_DEFAULT);
        ImageIcon icon = new ImageIcon(image);
        antButton.setIcon(icon);
    }
    private void mostrarCartaActual () throws IOException
    {
        BufferedImage bufferedImage = ImageIO.read(new File(listaActual.buscarPosición(pos).getDato().getCaminoImagen()));
        Image image = bufferedImage.getScaledInstance(cartaLabel.getWidth()-5, cartaLabel.getHeight(), Image.SCALE_DEFAULT);
        ImageIcon icon = new ImageIcon(image);
        cartaLabel.setIcon(icon);
        this.cartaLabel.setOpaque(false);
        this.cartaLabel.setVisible(true);
        this.nombreLabel.setText("Nombre: " + String.valueOf(listaActual.buscarPosición(pos).getDato().getNombre()));
        String aux = "Tipos: ";
        String[] tipos = listaActual.buscarPosición(pos).getDato().getTipo();
        for (String i:tipos)
        {
            aux += i + "/";
        }
        aux = aux.substring(0, aux.length()-1);
        this.tiposLabel.setText(aux);
        this.atributoLabel.setText(String.valueOf(listaActual.buscarPosición(pos).getDato().getAtributo()));
        if (listaActual.buscarPosición(pos).getDato().getLv() == -1)
        {
            this.lvLabel.setVisible(false);
            this.atkLabel.setVisible(false);
            this.defLabel.setVisible(false);
            this.atributoLabel.setVisible(false);
            labelAt.setVisible(false);
        }
        else
        {
            this.lvLabel.setVisible(true);
            this.atkLabel.setVisible(true);
            this.defLabel.setVisible(true);
            this.atributoLabel.setVisible(true);
            labelAt.setVisible(true);
        }
        this.lvLabel.setText("Lv: " + String.valueOf(listaActual.buscarPosición(pos).getDato().getLv()));
        this.atkLabel.setText("Atk: " + String.valueOf(listaActual.buscarPosición(pos).getDato().getAtk()));
        this.defLabel.setText("Def: " + String.valueOf(listaActual.buscarPosición(pos).getDato().getDef()));
        //this.setText("Descripción: " + listaActual.buscarPosición(pos).getDato().getDescripción());
        this.descripciónText.setText("Descripción: " + listaActual.buscarPosición(pos).getDato().getDescripción());
        actualizarNumCarta();
        asignarFlechaIzquierda();
        asignarFlechaDerecha();
    }
    private void sigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sigButtonActionPerformed
        // TODO add your handling code here:
        if (pos < listaActual.posiciónFinal())
        {
            pos += 1;
        }
        else
        {
            pos = 0;
        }
        try {
                //this.cartaLabel.setIcon(listaActual.buscarPosición(pos).getDato().getIcono());
                mostrarCartaActual();
            } catch (IOException ex) {
                Logger.getLogger(FramePráctica.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }//GEN-LAST:event_sigButtonActionPerformed

    private void atributoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributoButtonActionPerformed
        // TODO add your handling code here:
        this.listaActual = this.atributo;
        pos = 0;
        try {
            this.mostrarCartaActual();
        } catch (IOException ex) {
            Logger.getLogger(FramePráctica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_atributoButtonActionPerformed

    private void atkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atkButtonActionPerformed
        // TODO add your handling code here:
        this.listaActual = this.atk;
        pos = 0;
        try {
            this.mostrarCartaActual();
        } catch (IOException ex) {
            Logger.getLogger(FramePráctica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_atkButtonActionPerformed

    private void defButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defButtonActionPerformed
        // TODO add your handling code here:
        this.listaActual = this.def;
        pos = 0;
        try {
            this.mostrarCartaActual();
        } catch (IOException ex) {
            Logger.getLogger(FramePráctica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_defButtonActionPerformed

    private void sonidoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sonidoButtonActionPerformed
        // TODO add your handling code here:
        this.reproducir = !reproducir;
        try {
            reproducirMusica();
        } catch (IOException ex) {
            Logger.getLogger(FramePráctica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sonidoButtonActionPerformed

    private void reproducirMusica () throws IOException
    {
        String camino;
        if (this.reproducir)
        {
            clip.start();
            camino = "C:\\Users\\felix\\OneDrive\\Documentos\\NetBeansProjects\\Practica4\\src\\main\\java\\com\\mycompany\\practica4\\bocina.png";
        }
        else
        {
            clip.stop();
            camino = "C:\\Users\\felix\\OneDrive\\Documentos\\NetBeansProjects\\Practica4\\src\\main\\java\\com\\mycompany\\practica4\\bocina-overlay.png";
        }
        BufferedImage bufferedImage = ImageIO.read(new File(camino));
        Image image = bufferedImage.getScaledInstance(this.sonidoButton.getWidth()-20, sonidoButton.getHeight()-5, Image.SCALE_DEFAULT);
        ImageIcon icon = new ImageIcon(image);
        sonidoButton.setIcon(icon);
    }
    private void actualizarNumCarta ()
    {
        cartasNum.setText("[ " + String.valueOf(pos+1) + " / " + String.valueOf(listaActual.posiciónFinal()+1) + " ]");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FramePráctica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FramePráctica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FramePráctica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FramePráctica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    try {
                        new FramePráctica().setVisible(true);
                    } catch (UnsupportedAudioFileException ex) {
                        Logger.getLogger(FramePráctica.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (LineUnavailableException ex) {
                        Logger.getLogger(FramePráctica.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(FramePráctica.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox LtoH;
    private javax.swing.JButton alfabeticaButton;
    private javax.swing.JButton antButton;
    private javax.swing.JButton atkButton;
    private javax.swing.JLabel atkLabel;
    private javax.swing.JButton atributoButton;
    private javax.swing.JLabel atributoLabel;
    private javax.swing.JComboBox<String> atributoList;
    private javax.swing.JLabel cartaLabel;
    private javax.swing.JLabel cartasNum;
    private javax.swing.JButton defButton;
    private javax.swing.JLabel defLabel;
    private javax.swing.JTextArea descripciónText;
    private javax.swing.JLabel fondoLabel;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelAt;
    private javax.swing.JLabel lvLabel;
    private javax.swing.JComboBox<String> lvList;
    private javax.swing.JButton nivelButton;
    private javax.swing.JLabel nombreLabel;
    private javax.swing.JButton sigButton;
    private javax.swing.JButton sonidoButton;
    private javax.swing.JLabel tiposLabel;
    // End of variables declaration//GEN-END:variables
}
